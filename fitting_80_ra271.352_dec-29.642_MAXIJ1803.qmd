---
title: "Fitting GP to lightcurve 80_ra271.352_dec-29.642_MAXIJ1803 in Stan"
execute: 
  echo: false
format: 
  html:
    toc: true
    df-print: default 
self-contained: true
number-sections: true
---

```{r}
#| message: false
library(conflicted)
library(ggplot2)
library(readr)
library(dplyr)
library(here)
library(cmdstanr)
library(posterior)
library(bayesplot)
library(astsa)

color_scheme_set("brightblue")
register_knitr_engine(override = FALSE)

mcmc_plots <- function(fit, variables) {
  draws_arr <- fit$draws(format = "draws_array")
  mcmc_trace(draws_arr, pars = variables, facet_args = list(nrow = 2)) |> print()
  mcmc_dens(draws_arr, pars = variables, facet_args = list(nrow = 2)) |> print()
  mcmc_pairs(draws_arr, pars = variables, off_diag_fun = "hex") |> print()
}

plot_postpred <- function(fit, x, y, y_err, x_star, title = "") {
  postpred_draws <- as_draws_rvars(fit$draws("f_star"))
  
  ggplot() +
    aes(x = x_star) +
    geom_ribbon(aes(ymin = quantile(postpred_draws$f_star, probs = 0.16)[1,],
                    ymax = quantile(postpred_draws$f_star, probs = 0.84)[1,]),
                fill = "blue", alpha = 0.3) +
    geom_ribbon(aes(ymin = quantile(postpred_draws$f_star, probs = 0.05)[1,],
                    ymax = quantile(postpred_draws$f_star, probs = 0.95)[1,]),
                fill = "blue", alpha = 0.3) +
    geom_line(aes(y = median(postpred_draws$f_star)), colour = "black") +
    geom_linerange(aes(x = x, y = y, 
                       ymax = y + y_err, ymin = y - y_err), colour = "red")  +
    geom_point(aes(x = x, y = y), size = 2, colour = "red") +
    labs(x = "MJD", y = "Flux (Jy)", title = title) +
    theme_classic()
}

plot_PSD <- function(fit, nsamples = 200, title = "") {
  draws_subset <- 
    subset_draws(fit$draws(), 
                 variable = "f_star", 
                 draw = 1:nsamples) |> 
    as_draws_matrix() |> 
    t()

  spec <- mvspec(draws_subset, plot = FALSE, taper = 0.1, detrend = TRUE, demean = TRUE)
  #spec <- spectrum(draws_subset, plot = FALSE)
  
  data.frame(
    frequency = spec$freq / 2,
    power = spec$spec
  ) |> 
    rowwise() |> 
    mutate(q0.05 = quantile(c_across(starts_with("power.")), probs = 0.05),
           q0.16 = quantile(c_across(starts_with("power.")), probs = 0.16),
           median = median(c_across(starts_with("power."))),
           q0.84 = quantile(c_across(starts_with("power.")), probs = 0.84),
           q0.95 = quantile(c_across(starts_with("power.")), probs = 0.95)) |> 
    ggplot() +
    aes(x = frequency, y = median) +
    geom_ribbon(aes(ymin = q0.16, ymax = q0.84), fill = "blue", alpha = 0.3) +
    geom_ribbon(aes(ymin = q0.05, ymax = q0.95), fill = "blue", alpha = 0.3) +
    geom_line() +
    scale_x_log10() +
    scale_y_log10() +
    labs(x = "Frequency", y = "Spectral Density", title = title) +
    theme_bw()
}
```

# Light Curve

```{r}
csv_fname <- "80_ra271.352_dec-29.642_MAXIJ1803TraPDB_andersson.csv"
path_to_csv <- here("data_raw", csv_fname)
data_df <- read_csv(path_to_csv, show_col_types = FALSE)

mean_y <- mean(data_df$f_peak, na.rm = TRUE)
sd_y <- stats::sd(data_df$f_peak, na.rm = TRUE)

min_xgap <- min(diff(sort(data_df$mjd)))
range_x <- diff(range(data_df$mjd))

data_df <- data_df |> 
  mutate(x = mjd,
         y = (f_peak - mean_y)/sd_y,
         y_err = f_peak_err/sd_y)

x_star <- seq(from = min(data_df$mjd), to = max(data_df$mjd), length.out = 200)

data_df |> 
  ggplot() +
  aes(x = x, y = y, 
      ymax = y + y_err, ymin = y - y_err) +
  geom_point(colour = "blue") +
  geom_linerange(colour = "black") +
  geom_rug(sides = "b", outside = FALSE, colour = "blue") +
  coord_cartesian(clip = "off") +
  labs(title = csv_fname, x = "Time (MJD)", y = "Standardised Flux Density") +
  theme_classic()
```

```{r}
#| include: false
summary(data_df[c("f_peak", "f_peak_err", "mjd", "y", "y_err")])
```

- The light curve has $N =$ `r NROW(data_df)` observations over a range of `r round(range_x, 2)` days.
- Observations are evenly spread over the time range.
- The shortest gap between observations is `r round(min_xgap, 2)` days.
- The longest gap between observations is `r round(max(diff(data_df$mjd)), 2)` days.
- The mean flux density is $\bar{y} =$ `r format(signif(mean(data_df$f_peak)*1000,3), scientific = F)` mJy.
- The mean standard error in the observations is `r format(signif(mean(data_df$f_peak_err)*1000,3), scientific = F)` mJy.
- The observational noise is very small relative to the brightness of the observations. 

# SE Basic Model

- Zero constant mean function.
- Squared Exponential kernel function.
- Homoskedastic noise.
- Wide prior on observational noise, uninformed by observational noise estimates.

$$y \sim \mathcal{N}(f(x), \sigma_\textrm{noise}^2)$$

$$f \sim \mathcal{GP}(\boldsymbol{0}, k(x,  x'))$$

$$k(x,x') = \eta \exp\left\{ -\frac{1}{2}\frac{(x - x')^2}{\ell^2}\right\}$$

$$\ell \sim \mathrm{InvGamma}\left(3, \frac{1}{2} \times \textrm{range}(x)\right)$$

$$\eta \sim \mathcal{N}^+(0,1)$$

$$\sigma_\textrm{noise} \sim \mathcal{N}^+(0,1)$$

```{r}
basic_model <- cmdstan_model(stan_file = "stan/basic_model.stan")
```

```{r}
#| output: false
#| message: false
data_list <- list(N = length(data_df$x), 
                  x = data_df$x,
                  y = data_df$y,
                  x_star = x_star,
                  N_star = length(x_star),
                  min_xgap = min_xgap,
                  range_x = range_x)

basic_fit <- basic_model$sample(
  data = data_list,
  #seed = 1,
  chains = 4,
  parallel_chains = 4,
  iter_warmup = 1000,
  iter_sampling = 1000,
  refresh = 0)
```

## MCMC Results

```{r}
basic_fit$diagnostic_summary()
```

```{r}
basic_fit$print(variables = c("eta", "ell", "sigma"), digits = 4)
```

## MCMC Plots

```{r}
mcmc_plots(basic_fit, c("eta", "ell", "sigma"))
```

## Posterior Predictive Samples

```{r}
#| fig-width: 10
#| fig-height: 4.5
with(data_df,
  plot_postpred(basic_fit, x, y, y_err, x_star)
)
```

The fitted model has a very long lengthscale, comparable to the length of the observational window. The estimated observational noise has a standard deviation more than an order of magnitude of that in the original data. The combination of these parameters has lead to a very smooth fit that passes through the middle of the observed data points rather than through any datapoints themselves.

## PSD

```{r}
#| message: false
plot_PSD(basic_fit)
```

# SE Observational Errors Model

- Zero constant mean function.
- Squared exponential kernel function.
- Heteroskedastic (Gaussian) noise.
- Incorporate data on error in observations of each $y_i$.

$$y_i \sim \mathcal{N}(f(x_i), \sigma_i^2)$$

$$f \sim \mathcal{GP}(\boldsymbol{0}, k(x,  x'))$$

$$k(x,x') = \eta \exp\left\{ -\frac{1}{2}\frac{(x - x')^2}{\ell^2}\right\}$$


$$\ell \sim \mathrm{InvGamma}\left(3, \frac{1}{2} \times \textrm{range}(x)\right)$$

$$\eta \sim \mathcal{N}^+(0,1)$$

$$\sigma_i \sim \mathcal{N}^+(\hat{e_i}, \mathrm{Var}(\boldsymbol{\hat{e}}))$$

```{r}
err_model <- cmdstan_model("stan/err_model.stan")
```

```{r}
#| output: false
#| message: false
data_list <- list(N = length(data_df$x), 
                  x = data_df$x,
                  y = data_df$y,
                  y_stderr = data_df$y_err,
                  x_star = x_star,
                  N_star = length(x_star),
                  min_xgap = min_xgap,
                  range_x = range_x)

err_fit <- err_model$sample(
  data = data_list,
  seed = 1,
  chains = 4,
  parallel_chains = 4,
  iter_warmup = 1000,
  iter_sampling = 1000,
  refresh = 0
)
```

```{r}
err_fit$diagnostic_summary()
```

## MCMC Results

```{r}
err_fit$print(variables = c("eta", "ell", "sigma[1]"), digits = 4)
```

## MCMC Plots

```{r}
mcmc_plots(err_fit, c("eta", "ell"))
```

```{r fig.height=9}
mcmc_dens(err_fit$draws(), regex_pars = "sigma", facet_args = list(nrow = 6))
```

## Posterior Predictive Samples

```{r}
#| fig-width: 10
#| fig-height: 4.5
with(data_df,
  plot_postpred(err_fit, x, y, y_err, x_star)
)
```

By including the observed observational errors for setting priors on the Gaussian noise of each observation, the fitted median passes through each of the observed points.

## PSD

```{r}
#| message: false
plot_PSD(err_fit)
```  

# SE + Periodic

- Observational errors fixed at the reported standard errors.

$$y_i \sim \mathcal{N}(f(x_i), \hat{e_i}^2)$$

$$f \sim \mathcal{GP}(\boldsymbol{0}, k(x,  x'))$$

$$k(x,x') = \eta_\textrm{SE} \exp\left\{ -\frac{1}{2}\frac{(x - x')^2}{\ell_\mathrm{SE}^2}\right\} + \eta_\textrm{P}\exp\left\{ -\frac{2 \sin^2\left( \pi\frac{\sqrt{(x - x')^2}}{T}\right)}{\ell_\mathrm{P}^2}\right\}$$

$$\ell_\mathrm{P} \sim \mathrm{InvGamma}\left(3, \frac{1}{2} \times \lceil\textrm{range}(x)\rceil\right)$$

$$\ell_\mathrm{SE}\sim \mathrm{InvGamma}\left(3, \frac{1}{2} \times \lceil\textrm{range}(x)\rceil\right)$$

$$\eta \sim \mathcal{N}^+(0,1)$$

$$T \sim \mathcal{U}\left[4 \times \textrm{min}(\nabla x), \frac{1}{4} \times \textrm{range}(x)\right]$$

```{r}
SE_P_model <- cmdstan_model(stan_file = "stan/SE_P_model.stan")
```

```{r}
#| output: false
#| message: false
data_list <- list(N = length(data_df$x), 
                  x = data_df$x,
                  y = data_df$y,
                  y_stderr = data_df$y_err,
                  x_star = x_star,
                  range_x = range_x,
                  N_star = length(x_star),
                  min_xgap = min_xgap,
                  T_ub = range_x / 4,
                  T_lb = min_xgap * 4)

SE_P_fit <- SE_P_model$sample(
  data = data_list,
  #seed = 2,
  chains = 4,
  parallel_chains = 4,
  iter_warmup = 2000,
  iter_sampling = 2000,
  refresh = 2000
)
```

## MCMC Results

```{r}
SE_P_fit$diagnostic_summary()
```

```{r}
SE_P_fit$print(variables = c("ell_SE", "ell_P", "eta_SE", "eta_P", "T"), digits = 3)
```

## MCMC Plots

```{r}
mcmc_plots(SE_P_fit, c("eta_SE", "eta_P", "ell_SE", "ell_P", "T"))
```

## Posterior Predictive Samples

```{r}
#| fig-width: 10
#| fig-height: 4.5
with(data_df,
     plot_postpred(SE_P_fit, x, y, y_err, x_star)
)
```

## PSD

```{r}
#| message: false
plot_PSD(SE_P_fit)
```

# SE + Matern 3/2 + Periodic

- Observational errors fixed at the reported standard errors.

$$y_i \sim \mathcal{N}(f(x_i), \hat{e_i}^2)$$

$$f \sim \mathcal{GP}(\boldsymbol{0}, k(x,  x'))$$

$$k(x,x') = \eta \left[ \exp\left\{ -\frac{1}{2}\frac{(x - x')^2}{\ell_\mathrm{SE}^2}\right\} + \left( 1 + \frac{\sqrt{3(x - x')^2}}{\ell_\mathrm{M}}\right) \exp\left\{ -\frac{\sqrt{3(x - x')^2}}{\ell_\mathrm{M}}\right\} + \exp\left\{ -\frac{2 \sin^2\left( \pi\frac{\sqrt{(x - x')^2}}{T}\right)}{\ell_\mathrm{P}^2}\right\} \right]$$

$$\ell_\mathrm{P} \sim \mathrm{InvGamma}\left(3, \frac{1}{2} \times \lceil\textrm{range}(x)\rceil\right)$$

$$\ell_\mathrm{SE} \sim \mathrm{InvGamma}\left(3, \frac{1}{2} \times \lceil\textrm{range}(x)\rceil\right)$$

$$\ell_\mathrm{M} \sim \mathrm{InvGamma}\left(3, \frac{1}{2} \times \lceil\textrm{range}(x)\rceil\right)$$

$$\eta \sim \mathcal{N}^+(0,1)$$

$$T \sim \mathcal{U}\left[4 \times \textrm{min}(\nabla x), \frac{1}{4} \times \textrm{range}(x)\right]$$

```{r}
SE_M32_P_model <- cmdstan_model(stan_file = "stan/SE_M32_P_model.stan")
```

```{r}
#| output: false
#| message: false
data_list <- list(N = length(data_df$x), 
                  x = data_df$x,
                  y = data_df$y,
                  y_stderr = data_df$y_err,
                  x_star = x_star,
                  N_star = length(x_star),
                  min_xgap = min_xgap,
                  range_x = range_x,
                  T_lb = min_xgap * 4,
                  T_ub = range_x / 4)

SE_M32_P_fit <- SE_M32_P_model$sample(
  data = data_list,
  seed = 2,
  chains = 4,
  parallel_chains = 4,
  iter_warmup = 2000,
  iter_sampling = 2000,
  refresh = 1000
)
```

## MCMC Results

```{r}
SE_M32_P_fit$diagnostic_summary()
```

```{r}
SE_M32_P_fit$print(variables = c("eta", "ell_SE", "ell_M", "ell_P", "T"), digits = 4)
```

## MCMC Plots

```{r}
mcmc_plots(SE_M32_P_fit, c("eta", "ell_SE", "ell_M", "ell_P", "T"))
```
## Posterior Predictive Samples

```{r}
#| fig-width: 10
#| fig-height: 4.5
with(data_df,
  plot_postpred(SE_M32_P_fit, x, y, y_err, x_star)
)
```

## PSD

```{r}
#| message: false
plot_PSD(SE_M32_P_fit)
```
