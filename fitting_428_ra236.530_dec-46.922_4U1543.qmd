---
title: "Fitting GP to lightcurve 428_...in Stan"
execute: 
  echo: false
format: 
  html:
    df-print: default 
self-contained: true
---

Notebook outlining the fitting of GP to thunderKAT lightcurve ID$ 428_...

```{r}
#| message: false
library(conflicted)
library(ggplot2)
library(readr)
library(dplyr)
library(here)
library(cmdstanr)
library(posterior)
library(bayesplot)

color_scheme_set("brightblue")
register_knitr_engine(override = FALSE)

plot_PSD <- function(postpred_draws, nsamples = 200) {
  
  draws_subset <- 
    subset_draws(postpred_draws, 
                 variable = "f_star", 
                 draw = 1:nsamples) |> 
    as_draws_matrix() |> 
    t()
  
  spec <- spectrum(draws_subset, plot = FALSE)
  
  data.frame(
    frequency = spec$freq,
    power = spec$spec
  ) |> 
    rowwise() |> 
    mutate(q0.05 = quantile(c_across(starts_with("power.")), probs = 0.05),
           q0.16 = quantile(c_across(starts_with("power.")), probs = 0.16),
           median = median(c_across(starts_with("power."))),
           q0.84 = quantile(c_across(starts_with("power.")), probs = 0.84),
           q0.95 = quantile(c_across(starts_with("power.")), probs = 0.95)) |> 
    ggplot() +
    aes(x = frequency, y = median) +
    geom_ribbon(aes(ymin = q0.16, ymax = q0.84), fill = "blue", alpha = 0.3) +
    geom_ribbon(aes(ymin = q0.05, ymax = q0.95), fill = "blue", alpha = 0.3) +
    geom_line() +
    scale_x_log10() +
    scale_y_log10() +
    labs(x = "Frequency", y = "Spectral Density") +
    theme_bw()
}
```

```{r}
csv_fname <- "428_ra236.530_dec-46.922_4U1543TraPDB_andersson.csv"
path_to_csv <- here("data_raw", csv_fname)
data_df <- read_csv(path_to_csv, show_col_types = FALSE)

x_star <- seq(from = min(data_df$mjd), to = max(data_df$mjd), length.out = 300)

data_df |> 
  ggplot() +
  aes(x = mjd, y = f_peak, 
      ymax = f_peak + f_peak_err, ymin = f_peak - f_peak_err) +
  geom_point(colour = "red") +
  geom_linerange(colour = "red") +
  labs(title = csv_fname, x = "MJD", y = "Flux Density (Jy)") +
  theme_classic()
```

```{r}
#| include: false
summary(data_df[c("f_peak", "f_peak_err", "mjd")])
```

- The light curve has $N =$ `r NROW(data_df)` observations over a range of `r diff(range(data_df$mjd))` days.
- The mean flux density is $\bar{y} =$ `r mean(data_df$f_peak)` Jy.
- The mean standard error is `r mean(data_df$f_peak)` Jy.
- The observational noise is faint relative to the brightness of the observations. 
- Observations are evenly spread over the time range.
- There are hints of correlated noise components in the light curve.

# Basic Model

- Zero constant mean function
- Homoskedastic noise
- Not using data on error in observations
- Wide prior on observational errors

$$y \sim \mathcal{N}(f(x), \sigma_\textrm{noise}^2)$$

$$f \sim \mathcal{GP}(\boldsymbol{0}, k(x,  x'))$$


$$k(x,x') = \eta^2 \exp\left\{ -\frac{1}{2}\frac{(x - x')^2}{\ell^2}\right\}$$

$$\ell \sim \mathrm{InvGamma}(5,5)$$

$$\eta \sim \mathcal{N}^+(0,1)$$

$$\sigma_\textrm{noise} \sim \mathcal{N}^+(0,1)$$

```{r}
basic_model <- cmdstan_model(stan_file = "stan/basic_model.stan")
```

```{r}
#| output: false
#| message: false
data_list <- list(N = length(data_df$mjd), 
                  x = data_df$mjd,
                  y = data_df$f_peak,
                  x_star = x_star,
                  N_star = length(x_star))

basic_fit <- basic_model$sample(
  data = data_list,
  seed = 1,
  chains = 4,
  parallel_chains = 4,
  refresh = 0
)
```

```{r}
#| include: false
basic_fit$cmdstan_diagnose()
```

## MCMC Results

```{r}
basic_fit$print(variables = c("eta", "ell", "sigma"), digits = 6)
```

```{r}
basic_draws_arr <- basic_fit$draws(format = "draws_array")
mcmc_trace(basic_draws_arr, pars = c("eta", "ell", "sigma"), facet_args = list(nrow = 2))
```

```{r}
mcmc_dens(basic_draws_arr, pars = c("eta", "ell", "sigma"), facet_args = list(nrow = 2))
```

```{r}
mcmc_pairs(basic_draws_arr, pars = c("eta", "ell", "sigma"), off_diag_fun = "hex")
```

## Posterior Predictive Samples

```{r}
basic_postpred_draws <- as_draws_rvars(basic_fit$draws("f_star"))

ggplot() +
  aes(x = x_star) +
  geom_ribbon(aes(ymin = quantile(basic_postpred_draws$f_star, probs = 0.16)[1,],
                  ymax = quantile(basic_postpred_draws$f_star, probs = 0.84)[1,]),
              fill = "blue", alpha = 0.3) +
  geom_ribbon(aes(ymin = quantile(basic_postpred_draws$f_star, probs = 0.05)[1,],
                  ymax = quantile(basic_postpred_draws$f_star, probs = 0.95)[1,]),
              fill = "blue", alpha = 0.3) +
  geom_line(aes(y = median(basic_postpred_draws$f_star)), linewidth = 1, colour = "black") +
  geom_linerange(aes(x = data_df$mjd, y = data_df$f_peak, 
                     ymax = data_df$f_peak + data_df$f_peak_err, 
                     ymin = data_df$f_peak - data_df$f_peak_err), colour = "red")  +
  geom_point(aes(x = data_df$mjd, y = data_df$f_peak), size = 2, colour = "red") +
  labs(x = "MJD", y = "Flux Density") +
  theme_classic()
```

The fitted model has a very long lengthscale, comparable to the length of the observational window. The estimated observational noise has a standard deviation more than an order of magnitude of that in the original data. The combination of these parameters has lead to a very smooth fit that passes through the middle of the observed data points rather than through any datapoints themselves.

```{r}
#| message: false
plot_PSD(basic_postpred_draws)
```

# Observational Errors Model

- Zero constant mean function
- Include data on error in observations of $y_i$
- Heteroskedastic (Gaussian) noise

$$y_i \sim \mathcal{N}(f(x_i), \sigma_i^2)$$

$$f \sim \mathcal{GP}(\boldsymbol{0}, k(x,  x'))$$

$$k(x,x') = \eta^2 \exp\left\{ -\frac{1}{2}\frac{(x - x')^2}{\ell^2}\right\}$$

$$\ell \sim \mathrm{InvGamma}(5,5)$$

$$\eta \sim \mathcal{N}^+(0,1)$$

$$\sigma_i \sim \mathcal{N}^+(\textrm{stderr}(y_i), \mathrm{Var}(\textrm{stderr}(\boldsymbol{y})))$$

```{r}
err_model <- cmdstan_model("stan/err_model.stan")
```

```{r}
#| output: false
#| message: false
data_list <- list(N = length(data_df$mjd), 
                  x = data_df$mjd,
                  y = data_df$f_peak,
                  y_stderr = data_df$f_peak_err,
                  x_star = x_star,
                  N_star = length(x_star))

err_fit <- err_model$sample(
  data = data_list,
  seed = 1,
  chains = 4,
  parallel_chains = 4,
  refresh = 0
)
```

```{r}
#| include: false
err_fit$cmdstan_diagnose()
```

## MCMC Results

```{r}
err_fit$print(variables = c("eta", "ell", "sigma[1]"), digits = 6)
```

```{r}
err_draws_arr <- err_fit$draws(format = "draws_array")
mcmc_trace(err_draws_arr, pars = c("eta", "ell"), facet_args = list(nrow = 2))
```

```{r}
mcmc_dens(err_draws_arr, pars = c("eta", "ell"), facet_args = list(nrow = 2))
```

```{r}
mcmc_pairs(err_draws_arr, pars = c("eta", "ell"), off_diag_fun = "hex")
```

```{r fig.height=9}
mcmc_dens(err_draws_arr, regex_pars = "sigma", facet_args = list(nrow = 7))
```

## Posterior Predictive Samples

```{r}
err_postpred_draws <- as_draws_rvars(err_fit$draws("f_star"))

ggplot() +
  aes(x = x_star) +
  geom_ribbon(aes(ymin = quantile(err_postpred_draws$f_star, probs = 0.16)[1,],
                  ymax = quantile(err_postpred_draws$f_star, probs = 0.84)[1,]),
              fill = "blue", alpha = 0.3) +
  geom_ribbon(aes(ymin = quantile(err_postpred_draws$f_star, probs = 0.05)[1,],
                  ymax = quantile(err_postpred_draws$f_star, probs = 0.95)[1,]),
              fill = "blue", alpha = 0.3) +
  geom_line(aes(y = median(err_postpred_draws$f_star)), linewidth = 1, colour = "black") +
  geom_linerange(aes(x = data_df$mjd, y = data_df$f_peak, 
                     ymax = data_df$f_peak + data_df$f_peak_err, 
                     ymin = data_df$f_peak - data_df$f_peak_err), colour = "red")  +
  geom_point(aes(x = data_df$mjd, y = data_df$f_peak), size = 2, colour = "red") +
  labs(x = "MJD", y = "Flux Density") +
  theme_classic()
```

By including the observed observational errors for setting priors on the Gaussian noise of each observation, the fitted median passes through each of the observed points.

```{r}
#| message: false
plot_PSD(err_postpred_draws)
```  

# Constant (non-zero) Mean function

- Constant mean function
- Prior on mean function value
- Include data on error in observations of $y_i$
- Heteroskedastic (Gaussian) noise

$$y_i \sim \mathcal{N}(f(x_i), \sigma_i^2)$$

$$f \sim \mathcal{GP}(C, k(x,  x'))$$

$$C \sim \mathcal{U}[0,1]$$

$$k(x,x') = \eta^2 \exp\left\{ -\frac{1}{2}\frac{(x - x')^2}{\ell^2}\right\}$$

$$\ell \sim \mathrm{InvGamma}(5,5)$$

$$\eta \sim \mathcal{N}^+(0,1)$$

$$\sigma_i \sim \mathcal{N}^+(\textrm{stderr}(y_i), \mathrm{Var}(\textrm{stderr}(\boldsymbol{y})))$$

```{r}
flat_mean_model <- cmdstan_model("stan/flat_mean_model.stan")
```

```{r}
#| message: false
#| output: false
data_list <- list(N = length(data_df$mjd), 
                  x = data_df$mjd,
                  y = data_df$f_peak,
                  y_stderr = data_df$f_peak_err,
                  x_star = x_star,
                  N_star = length(x_star))

flat_mean_fit <- flat_mean_model$sample(
  data = data_list,
  seed = 1,
  chains = 4,
  parallel_chains = 4,
  refresh = 0
)
```

```{r}
#| include: false
flat_mean_fit$cmdstan_diagnose()
```

## MCMC Results

```{r}
flat_mean_fit$print(variables = c("eta", "ell", "C", "sigma[1]"), digits = 6)
```

```{r}
flat_mean_draws_arr <- flat_mean_fit$draws(format = "draws_array")
mcmc_trace(flat_mean_draws_arr, pars = c("eta", "ell", "C"), facet_args = list(nrow = 2))
```

```{r}
mcmc_dens(flat_mean_draws_arr, pars = c("eta", "ell", "C"), facet_args = list(nrow = 2))
```

```{r}
mcmc_pairs(flat_mean_draws_arr, pars = c("eta", "ell", "C"), off_diag_fun = "hex")
```

## Posterior Predictive Samples

```{r}
flat_mean_postpred_draws <- as_draws_rvars(flat_mean_fit$draws("f_star"))

ggplot() +
  aes(x = x_star) +
  geom_ribbon(aes(ymin = quantile(flat_mean_postpred_draws$f_star, probs = 0.16)[1,],
                  ymax = quantile(flat_mean_postpred_draws$f_star, probs = 0.84)[1,]),
              fill = "blue", alpha = 0.3) +
  geom_ribbon(aes(ymin = quantile(flat_mean_postpred_draws$f_star, probs = 0.05)[1,],
                  ymax = quantile(flat_mean_postpred_draws$f_star, probs = 0.95)[1,]),
              fill = "blue", alpha = 0.3) +
  geom_line(aes(y = median(flat_mean_postpred_draws$f_star)), linewidth = 1, colour = "black") +
  geom_hline(aes(yintercept = mean(data_df$f_peak)), linetype = "dashed") +
  geom_hline(aes(yintercept = mean(flat_mean_fit$draws("C"))), colour = "orange") +
  geom_linerange(aes(x = data_df$mjd, y = data_df$f_peak, 
                     ymax = data_df$f_peak + data_df$f_peak_err, 
                     ymin = data_df$f_peak - data_df$f_peak_err), colour = "red")  +
  geom_point(aes(x = data_df$mjd, y = data_df$f_peak), size = 2, colour = "red") +
  labs(x = "MJD", y = "Flux Density") +
  theme_classic()
```

```{r}
#| message: false
plot_PSD(flat_mean_postpred_draws)
```

# Fixed constant (non-zero) Mean function

- Constant mean function set at fixed value, e.g., mean of observations
- Include data on error in observations of $y_i$
- Heteroskedastic (Gaussian) noise

$$y_i \sim \mathcal{N}(f(x_i), \sigma_i^2)$$

$$f \sim \mathcal{GP}(C, k(x,  x'))$$

$$k(x,x') = \eta^2 \exp\left\{ -\frac{1}{2}\frac{(x - x')^2}{\ell^2}\right\}$$

$$\ell \sim \mathrm{InvGamma}(5,5)$$

$$\eta \sim \mathcal{N}^+(0,1)$$

$$\sigma_i \sim \mathcal{N}^+(\textrm{stderr}(y_i), \mathrm{Var}(\textrm{stderr}(\boldsymbol{y})))$$

```{r}
fixed_mean_model <- cmdstan_model("stan/fixed_mean_model.stan")
```

## Mean Function = 0.2

```{r}
#| message: false
#| output: false
data_list <- list(N = length(data_df$mjd), 
                  x = data_df$mjd,
                  y = data_df$f_peak,
                  y_stderr = data_df$f_peak_err,
                  x_star = x_star,
                  N_star = length(x_star),
                  const_mean_value = 0.2)

fixed_mean_fit <- fixed_mean_model$sample(
  data = data_list,
  seed = 1,
  chains = 4,
  parallel_chains = 4,
  refresh = 0
)

fixed_mean_postpred_draws <- as_draws_rvars(fixed_mean_fit$draws("f_star"))
```

```{r}
ggplot() +
  aes(x = x_star) +
  geom_ribbon(aes(ymin = quantile(fixed_mean_postpred_draws$f_star, probs = 0.16)[1,],
                  ymax = quantile(fixed_mean_postpred_draws$f_star, probs = 0.84)[1,]),
              fill = "blue", alpha = 0.3) +
  geom_ribbon(aes(ymin = quantile(fixed_mean_postpred_draws$f_star, probs = 0.05)[1,],
                  ymax = quantile(fixed_mean_postpred_draws$f_star, probs = 0.95)[1,]),
              fill = "blue", alpha = 0.3) +
  geom_line(aes(y = median(fixed_mean_postpred_draws$f_star)), linewidth = 1, colour = "black") +
  geom_hline(aes(yintercept = mean(data_df$f_peak)), linetype = "dashed") +
  geom_hline(aes(yintercept = data_list$const_mean_value), colour = "orange") +
  geom_point(aes(x = data_df$mjd, y = data_df$f_peak), size = 2, colour = "red") +
  labs(x = "MJD", y = "Flux Density") +
  theme_classic()
```

```{r}
#| message: false
plot_PSD(fixed_mean_postpred_draws)
```

## Mean Function = 0.195

```{r}
#| message: false
#| output: false
data_list <- list(N = length(data_df$mjd), 
                  x = data_df$mjd,
                  y = data_df$f_peak,
                  y_stderr = data_df$f_peak_err,
                  x_star = x_star,
                  N_star = length(x_star),
                  const_mean_value = 0.195)

fixed_mean_fit <- fixed_mean_model$sample(
  data = data_list,
  seed = 1,
  chains = 4,
  parallel_chains = 4,
  refresh = 0
)

fixed_mean_postpred_draws <- as_draws_rvars(fixed_mean_fit$draws("f_star"))
```

```{r}
ggplot() +
  aes(x = x_star) +
  geom_ribbon(aes(ymin = quantile(fixed_mean_postpred_draws$f_star, probs = 0.16)[1,],
                  ymax = quantile(fixed_mean_postpred_draws$f_star, probs = 0.84)[1,]),
              fill = "blue", alpha = 0.3) +
  geom_ribbon(aes(ymin = quantile(fixed_mean_postpred_draws$f_star, probs = 0.05)[1,],
                  ymax = quantile(fixed_mean_postpred_draws$f_star, probs = 0.95)[1,]),
              fill = "blue", alpha = 0.3) +
  geom_line(aes(y = median(fixed_mean_postpred_draws$f_star)), linewidth = 1, colour = "black") +
  geom_hline(aes(yintercept = mean(data_df$f_peak)), linetype = "dashed") +
  geom_hline(aes(yintercept = data_list$const_mean_value), colour = "orange") +
  geom_point(aes(x = data_df$mjd, y = data_df$f_peak), size = 2, colour = "red") +
  labs(x = "MJD", y = "Flux Density") +
  theme_classic()
```

```{r}
#| message: false
plot_PSD(fixed_mean_postpred_draws)
```

## Mean Function = 0.18

```{r}
#| message: false
#| output: false
data_list <- list(N = length(data_df$mjd), 
                  x = data_df$mjd,
                  y = data_df$f_peak,
                  y_stderr = data_df$f_peak_err,
                  x_star = x_star,
                  N_star = length(x_star),
                  const_mean_value = 0.18)

fixed_mean_fit <- fixed_mean_model$sample(
  data = data_list,
  seed = 1,
  chains = 4,
  parallel_chains = 4,
  refresh = 0
)

fixed_mean_postpred_draws <- as_draws_rvars(fixed_mean_fit$draws("f_star"))
```

```{r}
ggplot() +
  aes(x = x_star) +
  geom_ribbon(aes(ymin = quantile(fixed_mean_postpred_draws$f_star, probs = 0.16)[1,],
                  ymax = quantile(fixed_mean_postpred_draws$f_star, probs = 0.84)[1,]),
              fill = "blue", alpha = 0.3) +
  geom_ribbon(aes(ymin = quantile(fixed_mean_postpred_draws$f_star, probs = 0.05)[1,],
                  ymax = quantile(fixed_mean_postpred_draws$f_star, probs = 0.95)[1,]),
              fill = "blue", alpha = 0.3) +
  geom_line(aes(y = median(fixed_mean_postpred_draws$f_star)), linewidth = 1, colour = "black") +
  geom_hline(aes(yintercept = mean(data_df$f_peak)), linetype = "dashed") +
  geom_hline(aes(yintercept = data_list$const_mean_value), colour = "orange") +
  geom_point(aes(x = data_df$mjd, y = data_df$f_peak), size = 2, colour = "red") +
  labs(x = "MJD", y = "Flux Density") +
  theme_classic()
```

```{r}
#| message: false
plot_PSD(fixed_mean_postpred_draws)
```

# Matern 3/2 kernel, zero mean

$$y_i \sim \mathcal{N}(f(x_i), \sigma_i^2)$$

$$f \sim \mathcal{GP}(\boldsymbol{0}, k(x,  x'))$$

$$k(x,x') = \eta^2 \left( 1 + \frac{\sqrt{3(x - x')^2}}{\ell}\right) \exp\left\{ -\frac{\sqrt{3(x - x')^2}}{\ell}\right\}$$

$$\ell \sim \mathrm{InvGamma}(5,5)$$

$$\eta \sim \mathcal{N}^+(0,1)$$

$$\sigma_i \sim \mathcal{N}^+(\textrm{stderr}(y_i), \mathrm{Var}(\textrm{stderr}(\boldsymbol{y})))$$

```{r}
matern32_model <- cmdstan_model(stan_file = "stan/matern32_model.stan")
```

```{r}
#| output: false
#| message: false
data_list <- list(N = length(data_df$mjd), 
                  x = data_df$mjd,
                  y = data_df$f_peak,
                  y_stderr = data_df$f_peak_err,
                  x_star = x_star,
                  N_star = length(x_star))

m32_fit <- matern32_model$sample(
  data = data_list,
  seed = 1,
  chains = 4,
  parallel_chains = 4,
  refresh = 0
)
```

```{r}
#| include: false
m32_fit$cmdstan_diagnose()
```

## MCMC Results

```{r}
m32_fit$print(variables = c("eta", "ell", "sigma[1]"), digits = 6)
```

```{r}
m32_draws_arr <- m32_fit$draws(format = "draws_array")
mcmc_trace(m32_draws_arr, pars = c("eta", "ell", "sigma[1]"), facet_args = list(nrow = 2))
```

```{r}
mcmc_dens(m32_draws_arr, pars = c("eta", "ell", "sigma[1]"), facet_args = list(nrow = 2))
```

```{r}
mcmc_pairs(m32_draws_arr, pars = c("eta", "ell", "sigma[1]"), off_diag_fun = "hex")
```

## Posterior Predictive Samples

```{r}
m32_postpred_draws <- as_draws_rvars(m32_fit$draws("f_star"))

ggplot() +
  aes(x = x_star) +
  geom_ribbon(aes(ymin = quantile(m32_postpred_draws$f_star, probs = 0.16)[1,],
                  ymax = quantile(m32_postpred_draws$f_star, probs = 0.84)[1,]),
              fill = "blue", alpha = 0.3) +
  geom_ribbon(aes(ymin = quantile(m32_postpred_draws$f_star, probs = 0.05)[1,],
                  ymax = quantile(m32_postpred_draws$f_star, probs = 0.95)[1,]),
              fill = "blue", alpha = 0.3) +
  geom_line(aes(y = median(m32_postpred_draws$f_star)), linewidth = 1, colour = "black") +
  geom_linerange(aes(x = data_df$mjd, y = data_df$f_peak, 
                     ymax = data_df$f_peak + data_df$f_peak_err, 
                     ymin = data_df$f_peak - data_df$f_peak_err), colour = "red")  +
  geom_point(aes(x = data_df$mjd, y = data_df$f_peak), size = 2, colour = "red") +
  labs(x = "MJD", y = "Flux Density") +
  theme_classic()
```

```{r}
#| message: false
plot_PSD(m32_postpred_draws)
```

# SE + Matern 3/2 additive kernel

$$y_i \sim \mathcal{N}(f(x_i), \sigma_i^2)$$

$$f \sim \mathcal{GP}(\boldsymbol{0}, k(x,  x'))$$

$$k(x,x') = \eta^2 \left[ \exp\left\{ -\frac{1}{2}\frac{(x - x')^2}{\ell_\mathrm{SE}^2}\right\} + \left( 1 + \frac{\sqrt{3(x - x')^2}}{\ell_\mathrm{M}}\right) \exp\left\{ -\frac{\sqrt{3(x - x')^2}}{\ell_\mathrm{M}}\right\} \right]$$

$$\ell_\mathrm{SE} \sim \mathrm{InvGamma}(5,5)$$

$$\ell_\mathrm{M} \sim \mathrm{InvGamma}(5,5)$$

$$\eta \sim \mathcal{N}^+(0,1)$$

$$\sigma_i \sim \mathcal{N}^+(\textrm{stderr}(y_i), \mathrm{Var}(\textrm{stderr}(\boldsymbol{y})))$$


```{r}
SE_M32_model <- cmdstan_model(stan_file = "stan/SE_M32_model.stan")
```

```{r}
#| output: false
#| message: false
data_list <- list(N = length(data_df$mjd), 
                  x = data_df$mjd,
                  y = data_df$f_peak,
                  y_stderr = data_df$f_peak_err,
                  x_star = x_star,
                  N_star = length(x_star))

SE_M32_fit <- SE_M32_model$sample(
  data = data_list,
  seed = 1,
  chains = 4,
  parallel_chains = 4,
  refresh = 0
)
```

```{r}
SE_M32_fit$print(variables = c("eta", "ell_SE", "ell_M", "sigma[1]"), digits = 6)
```

## Posterior Predictive Samples

```{r}
SE_M32_postpred_draws <- as_draws_rvars(SE_M32_fit$draws("f_star"))

ggplot() +
  aes(x = x_star) +
  geom_ribbon(aes(ymin = quantile(SE_M32_postpred_draws$f_star, probs = 0.16)[1,],
                  ymax = quantile(SE_M32_postpred_draws$f_star, probs = 0.84)[1,]),
              fill = "blue", alpha = 0.3) +
  geom_ribbon(aes(ymin = quantile(SE_M32_postpred_draws$f_star, probs = 0.05)[1,],
                  ymax = quantile(SE_M32_postpred_draws$f_star, probs = 0.95)[1,]),
              fill = "blue", alpha = 0.3) +
  geom_line(aes(y = median(SE_M32_postpred_draws$f_star)), linewidth = 1, colour = "black") +
  geom_linerange(aes(x = data_df$mjd, y = data_df$f_peak, 
                     ymax = data_df$f_peak + data_df$f_peak_err, 
                     ymin = data_df$f_peak - data_df$f_peak_err), colour = "red")  +
  geom_point(aes(x = data_df$mjd, y = data_df$f_peak), size = 2, colour = "red") +
  labs(x = "MJD", y = "Flux Density") +
  theme_classic()
```

```{r}
#| message: false
plot_PSD(SE_M32_postpred_draws)
```


# SE x Matern 3/2 multiplicative kernel

$$y_i \sim \mathcal{N}(f(x_i), \sigma_i^2)$$

$$f \sim \mathcal{GP}(\boldsymbol{0}, k(x,  x'))$$

$$k(x,x') = \eta^2 \exp\left\{ -\frac{1}{2}\frac{(x - x')^2}{\ell_\mathrm{SE}^2}\right\}\left( 1 + \frac{\sqrt{3(x - x')^2}}{\ell_\mathrm{M}}\right) \exp\left\{ -\frac{\sqrt{3(x - x')^2}}{\ell_\mathrm{M}}\right\}$$

$$\ell_\mathrm{SE} \sim \mathrm{InvGamma}(5,5)$$

$$\ell_\mathrm{M} \sim \mathrm{InvGamma}(5,5)$$

$$\eta \sim \mathcal{N}^+(0,1)$$

$$\sigma_i \sim \mathcal{N}^+(\textrm{stderr}(y_i), \mathrm{Var}(\textrm{stderr}(\boldsymbol{y})))$$


```{r}
SExM32_model <- cmdstan_model(stan_file = "stan/SExM32_model.stan")
```

```{r}
#| output: false
#| message: false
data_list <- list(N = length(data_df$mjd), 
                  x = data_df$mjd,
                  y = data_df$f_peak,
                  y_stderr = data_df$f_peak_err,
                  x_star = x_star,
                  N_star = length(x_star))

SExM32_fit <- SExM32_model$sample(
  data = data_list,
  seed = 2,
  chains = 4,
  parallel_chains = 4,
  refresh = 0
)
```

```{r}
#| include: false
SExM32_fit$cmdstan_diagnose()
```

## MCMC Results

```{r}
SExM32_fit$print(variables = c("eta", "ell_SE", "ell_M", "sigma[1]", "f_star[1]"), digits = 6)
```

```{r}
SExM32_draws_arr <- SExM32_fit$draws(format = "draws_array")
mcmc_trace(SExM32_draws_arr, pars = c("eta", "ell_SE", "ell_M"), facet_args = list(nrow = 2))
```

```{r}
mcmc_dens(SExM32_draws_arr, pars = c("eta", "ell_SE", "ell_M"), facet_args = list(nrow = 2))
```

```{r}
mcmc_pairs(SExM32_draws_arr, pars = c("eta", "ell_SE", "ell_M"), off_diag_fun = "hex")
```

```{r fig.height=9}
mcmc_dens(SExM32_draws_arr, regex_pars = "sigma", facet_args = list(nrow = 7))
```

## Posterior Predictive Samples

```{r}
SExM32_postpred_draws <- as_draws_rvars(SExM32_fit$draws("f_star"))

ggplot() +
  aes(x = x_star) +
  geom_ribbon(aes(ymin = quantile(SExM32_postpred_draws$f_star, probs = 0.16)[1,],
                  ymax = quantile(SExM32_postpred_draws$f_star, probs = 0.84)[1,]),
              fill = "blue", alpha = 0.3) +
  geom_ribbon(aes(ymin = quantile(SExM32_postpred_draws$f_star, probs = 0.05)[1,],
                  ymax = quantile(SExM32_postpred_draws$f_star, probs = 0.95)[1,]),
              fill = "blue", alpha = 0.3) +
  geom_line(aes(y = median(SExM32_postpred_draws$f_star)), linewidth = 1, colour = "black") +
  geom_linerange(aes(x = data_df$mjd, y = data_df$f_peak, 
                     ymax = data_df$f_peak + data_df$f_peak_err, 
                     ymin = data_df$f_peak - data_df$f_peak_err), colour = "red")  +
  geom_point(aes(x = data_df$mjd, y = data_df$f_peak), size = 2, colour = "red") +
  labs(x = "MJD", y = "Flux Density") +
  theme_classic()
```

```{r}
#| message: false
plot_PSD(SExM32_postpred_draws)
```

# Matern 3/2 + QP kernel

$$y_i \sim \mathcal{N}(f(x_i), \sigma_i^2)$$

$$f \sim \mathcal{GP}(\boldsymbol{0}, k(x,  x'))$$

$$k(x,x') = \eta^2 \left[ \exp\left\{ -\frac{2 \sin^2\left( \pi\frac{\sqrt{(x - x')^2}}{T}\right)}{\ell_\mathrm{P}^2}\right\} + \exp\left\{ -\frac{1}{2}\frac{(x - x')^2}{\ell_\mathrm{SE}^2}\right\} + \left( 1 + \frac{\sqrt{3(x - x')^2}}{\ell_\mathrm{M}}\right) \exp\left\{ -\frac{\sqrt{3(x - x')^2}}{\ell_\mathrm{M}}\right\} \right]$$

$$\ell_\mathrm{P} \sim \mathrm{InvGamma}(5,5)$$

$$\ell_\mathrm{SE} \sim \mathrm{InvGamma}(5,5)$$

$$\ell_\mathrm{M} \sim \mathrm{InvGamma}(5,5)$$

$$\eta \sim \mathcal{N}^+(0,1)$$

$$T \sim U(\textrm{min_gap}(\boldsymbol{x}), \textrm{range}(\boldsymbol{x}))$$

$$\sigma_i \sim \mathcal{N}^+(\textrm{stderr}(y_i), \mathrm{Var}(\textrm{stderr}(\boldsymbol{y})))$$


```{r}
SE_M32_P_model <- cmdstan_model(stan_file = "stan/SE_M32_P_model.stan")
```

```{r}
#| output: false
#| message: false
data_list <- list(N = length(data_df$mjd), 
                  x = data_df$mjd,
                  y = data_df$f_peak,
                  y_stderr = data_df$f_peak_err,
                  x_star = x_star,
                  N_star = length(x_star),
                  T_lb = min(diff(data_df$mjd)),
                  T_ub = diff(range(data_df$mjd)))

SE_M32_P_fit <- SE_M32_P_model$sample(
  data = data_list,
  chains = 4,
  parallel_chains = 4,
  refresh = 0
)
```

```{r}
SE_M32_P_fit$print(variables = c("eta", "ell_SE", "ell_M", "ell_P", "T"), digits = 4)
```

```{r}
SE_M32_P_draws_arr <- SE_M32_P_fit$draws(format = "draws_array")
mcmc_trace(SE_M32_P_draws_arr, pars = c("eta", "ell_SE", "ell_M", "ell_P", "T"), facet_args = list(nrow = 2))
```

```{r}
mcmc_dens(SE_M32_P_draws_arr, pars = c("eta", "ell_SE", "ell_M", "ell_P", "T"), facet_args = list(nrow = 2))
```

```{r}
mcmc_pairs(SE_M32_P_draws_arr, pars = c("eta", "ell_SE", "ell_M", "ell_P", "T"), off_diag_fun = "hex")
```

```{r fig.height=9}
mcmc_dens(SE_M32_P_draws_arr, regex_pars = "sigma", facet_args = list(nrow = 7))
```

## Posterior Predictive Samples

```{r}
SE_M32_P_postpred_draws <- as_draws_rvars(SE_M32_P_fit$draws("f_star"))

ggplot() +
  aes(x = x_star) +
  geom_ribbon(aes(ymin = quantile(SE_M32_P_postpred_draws$f_star, probs = 0.16)[1,],
                  ymax = quantile(SE_M32_P_postpred_draws$f_star, probs = 0.84)[1,]),
              fill = "blue", alpha = 0.3) +
  geom_ribbon(aes(ymin = quantile(SE_M32_P_postpred_draws$f_star, probs = 0.05)[1,],
                  ymax = quantile(SE_M32_P_postpred_draws$f_star, probs = 0.95)[1,]),
              fill = "blue", alpha = 0.3) +
  geom_line(aes(y = median(SE_M32_P_postpred_draws$f_star)), linewidth = 1, colour = "black") +
  geom_linerange(aes(x = data_df$mjd, y = data_df$f_peak, 
                     ymax = data_df$f_peak + data_df$f_peak_err, 
                     ymin = data_df$f_peak - data_df$f_peak_err), colour = "red")  +
  geom_point(aes(x = data_df$mjd, y = data_df$f_peak), size = 2, colour = "red") +
  labs(x = "MJD", y = "Flux Density") +
  theme_classic()
```

```{r}
#| message: false
plot_PSD(SE_M32_P_postpred_draws)
```

