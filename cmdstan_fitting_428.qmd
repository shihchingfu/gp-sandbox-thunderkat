---
title: "stan_fitting_428"
format: html
---

```{r}
library(tidyverse)
library(here)
library(cmdstanr)
library(posterior)
library(bayesplot)

color_scheme_set("brightblue")
register_knitr_engine(override = FALSE)
```

```{r}
path_to_csv <- here("data_raw/428_ra236.530_dec-46.922_4U1543TraPDB_andersson.csv")
data_df <- read_csv(path_to_csv, show_col_types = FALSE)

data_df |> 
  ggplot() +
  aes(x = mjd, y = f_peak) +
  geom_point()
```

```{cmdstan, cache=TRUE, output.var = "marginal_model"}
functions {
  vector gp_pred_rng(array[] real x2,
                     vector y1,
                     array[] real x1,
                     real eta,
                     real ell,
                     real sigma,
                     real jitter) {
    int N1 = rows(y1);
    int N2 = size(x2);
    vector[N2] f2;
    {
      matrix[N1, N1] L_K;
      vector[N1] K_div_y1;
      matrix[N1, N2] k_x1_x2;
      matrix[N1, N2] v_pred;
      vector[N2] f2_mu;
      matrix[N2, N2] cov_f2;
      matrix[N1, N1] K;
      K = gp_exp_quad_cov(x1, eta, ell);
      for (n in 1:N1)
        K[n, n] = K[n,n] + square(sigma);
      L_K = cholesky_decompose(K);
      K_div_y1 = mdivide_left_tri_low(L_K, y1);
      K_div_y1 = mdivide_right_tri_low(K_div_y1', L_K)';
      k_x1_x2 = gp_exp_quad_cov(x1, x2, eta, ell);
      f2_mu = (k_x1_x2' * K_div_y1);
      v_pred = mdivide_left_tri_low(L_K, k_x1_x2);
      cov_f2 = gp_exp_quad_cov(x2, eta, ell) - v_pred' * v_pred;

      f2 = multi_normal_rng(f2_mu, add_diag(cov_f2, rep_vector(jitter, N2)));
    }
    return f2;
  }
}
data {
  int<lower=1> N;
  array[N] real x;
  vector[N] y;
  int<lower=1> N_star;
  array[N_star] real x_star;
}
transformed data {
  vector[N] mu = rep_vector(0, N);
}
parameters {
  real<lower=0,upper=10> ell;
  real<lower=0> eta;
  real<lower=0> sigma;
}
model {
  matrix[N, N] K = gp_exp_quad_cov(x, eta, ell);
  matrix[N, N] L = cholesky_decompose(add_diag(K, sigma^2));

  ell ~ inv_gamma(2, 2);
  eta ~ std_normal();
  sigma ~ std_normal();

  y ~ multi_normal_cholesky(mu, L);
}
generated quantities {
  vector[N_star] f_star = gp_pred_rng(x_star, y, x, eta, ell, sigma, 1e-9);
}
```

```{r}
marginal_model$exe_file()
```

```{r message=FALSE}
x_star <- seq(from = min(data_df$mjd), to = max(data_df$mjd), length.out = 100)

# names correspond to the data block in the Stan program
data_list <- list(N = length(data_df$mjd), 
                  x = data_df$mjd,
                  y = data_df$f_peak,
                  x_star = x_star,
                  N_star = length(x_star)
                  )

fit <- marginal_model$sample(
  data = data_list,
  seed = 123,
  chains = 4,
  parallel_chains = 4,
  refresh = 500 # print update every 500 iters
)
```

```{r}
# summarise all variables with default and additional summary measures
fit$cmdstan_summary()
```

```{r}
mcmc_hist(fit$draws("ell"))
mcmc_hist(fit$draws("eta"))
mcmc_hist(fit$draws("sigma"))
```

```{r}
mcmc_hist(fit$draws("f_star[100]"))
```


```{r}
ggplot() +
  geom_point(aes(x = x_star, y = median(draws_f$f_star))) +
  geom_point(aes(x = data_df$mjd, y = data_df$f_peak), colour = "blue")
```
